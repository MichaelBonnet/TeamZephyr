#Team Zephyr
#this code is executable but not fully done
import nmap 
import netifaces
from nmap import PortScanner
import socket    
import multiprocessing
import subprocess
import os
import threading
import time
import re
import pdb
import numpy

HOST_IP = []
HOST_MAC = []
PORTS = []
# Matrix to stuff ports, MAC, and other values into
A = numpy.matrix(["Port","State","Name","Product","Version","Additional Info","Common Platform Enumeration"])

#B = numpy.matrix(["tste","fdf","Nde","Pauct","Vefn","Adddional Info","Commform Enumeration"])
#A = numpy.concatenate((A,B))

drone_ip = '0.0.0.0'

#get router ip address
def get_router_ip():
    gws = netifaces.gateways()
    router_ip = list(gws['default'].values())[0][0]
    print("Router IP: " + router_ip)

#search the network 
def search_network():
    stream = os.popen('arp-scan -l')
    output = stream.read()
    for line in output.split('\n'):
        ip = re.findall(r'[0-9]+(?:\.[0-9]+){3}', line)
        mac = re.findall(r'(?:[0-9a-fA-F]:?){12}', line)
        if ip:
            HOST_IP.append(ip[0])
        if mac:
            HOST_MAC.append(mac[0])

#get ip address of the current system, and the router it is connected to.
def get_my_ip():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(("8.8.8.8", 80))
    ip = s.getsockname()[0]
    s.close()
    return ip

def nmap_scan(tgt_host):
    nmScan = nmap.PortScanner()
    nmScan.scan(tgt_host, '21-443')

    # run a loop to print all the found result about the ports
    for host in nmScan.all_hosts():
        print('[+] Host IP : %s\n[+] Host Name : %s' % (host, nmScan[host].hostname()))
        print('[+] State : %s' % nmScan[host].state())
        for proto in nmScan[host].all_protocols():
            print('----------')
            print('[+] Protocol : %s' % proto)
            lport = nmScan[host][proto].keys()
            lport=sorted(lport)
            for port in lport:
                print ('[+] Port : %s\tState : %s' % (port, nmScan[host][proto][port]['state']))
                print ('[+] Name : %s\tProduct : %s\tVersion : %s' % (nmScan[host][proto][port]['name'], nmScan[host][proto][port]['product'], nmScan[host][proto][port]['version']))
                print ('[+] Additional info : %s\tCommon Platform Enumeration : %s' % (nmScan[host][proto][port]['extrainfo'], nmScan[host][proto][port]['cpe']))
                # Start concatenating matrix rows onto A
                B = numpy.matrix([port, nmScan[host][proto][port]['state'], nmScan[host][proto][port]['name'], nmScan[host][proto][port]['product'], nmScan[host][proto][port]['version'], nmScan[host][proto][port]['extrainfo'], nmScan[host][proto][port]['cpe']])
                A = numpy.concatenate((A,B))
                

def display_arp():
    print('ARP index:')
    print('IP address\t|\tMac Address')
    print('--------------------------------------------')
    for i in range(0, len(HOST_IP)):
        print(HOST_IP[i] + '\t|\t' + HOST_MAC[i])
        print('--------------------------------------------')
    print('\n\n')

# Prints out the concatenated information into an output file
def write_report():
    with open('targets.txt','w+') as fp:
    	for line in A:
    		numpy.savetxt(fp,line,fmt="%s")
    fp.close()
    return

if __name__ == '__main__':
    drone_ip = get_my_ip()
    search_network()
    get_router_ip()
    ip = get_my_ip()
    print("Drone IP: " + ip)
    display_arp()
    for i in HOST_IP:
        threads = list()
        print('\n\n\n[*] Scanning ip address: ' + i)
        nmap_scan(i)
    print("Matrix containing information in file: \n")
    print(A)
    write_report()



    
