#Team Zephyr
#this code is executable but not fully done
import nmap 
import netifaces
from nmap import PortScanner
import socket    
import multiprocessing
import subprocess
import os
import threading
import time
import re
import pdb

HOST_IP = []
HOST_MAC = []
PORTS = []
drone_ip = '0.0.0.0'

#get router ip address
def get_router_ip():
    gws = netifaces.gateways()
    router_ip = list(gws['default'].values())[0][0]
    print("Router IP: " + router_ip)

#search the network 
def search_network():
    stream = os.popen('arp -a')
    output = stream.read()
    for line in output.split('\n'):
        ip = re.findall(r'[0-9]+(?:\.[0-9]+){3}', line)
        mac = re.findall(r'(?:[0-9a-fA-F]:?){12}', line)
        if ip:
            HOST_IP.append(ip[0])
        if mac:
            HOST_MAC.append(mac[0])

#get ip address of the current system, and the router it is connected to.
def get_my_ip():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(("8.8.8.8", 80))
    ip = s.getsockname()[0]
    s.close()
    return ip

def nmap_scan(tgt_host, tgt_port):
    nmScan = nmap.PortScanner()
    try:
        nm = nmScan.scan(tgt_host, tgt_port, arguments='-sS')
        nm = nmScan.scan(tgt_host, tgt_port)['scan'][tgt_host]['tcp'][tgt_port]['state']
        print(f'port {tgt_port} is {nm}.')

    except KeyError:
        print(f'port {tgt_port} is closed.')
        pass

def display_arp():
    print('ARP index:')
    print('IP address\t|\tMac Address')
    print('--------------------------------------------')
    for i in range(0, len(HOST_IP)):
        print(HOST_IP[i] + '\t|\t' + HOST_MAC[i])
    print('\n\n')


def write_report():
    #fp = open('example.txt', 'w+')
    return

if __name__ == '__main__':
    for i in range(20, 25): #change port numbers as needed
        PORTS.append(i)
    drone_ip = get_my_ip()
    search_network()
    get_router_ip()
    ip = get_my_ip()
    print("Drone IP: " + ip)
    print('Host IP address: ')
    print(HOST_IP)
    display_arp()
    for i in HOST_IP:
        threads = list()
        print('[*] Scanning ip address: ' + i)
        for j in PORTS:
            x = threading.Thread(target=nmap_scan, args=(i, str(j)))
            threads.append(x)
            x.start()
        for index, thread in enumerate(threads):
            thread.join()




    
