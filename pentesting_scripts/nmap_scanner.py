#Team Zephyr
#necessary libraries to be imported

import nmap 
import netifaces
from nmap import PortScanner
import socket    
import multiprocessing
import subprocess
import os
import threading
import time
import re
import pdb
import numpy

HOST_IP = [] #contains the ip addresses of the devices connected onto the network.
HOST_MAC = [] #contains the mac address of the devices connected onto the network.
PORTS = [] #contains the open ports of the devices connected onto the network.

# Matrix to stuff ports, MAC, and other values into
A = numpy.matrix(["port","state","name","product","version","extrainfo","ocpe","ip"])

drone_ip = '0.0.0.0' #contains the ip address of our system

#get router ip address
def get_router_ip():
    gws = netifaces.gateways()
    router_ip = list(gws['default'].values())[0][0]
    print("Router IP: " + router_ip)

'''
search the network for devices connected on to the network
INPUT: null
OUTPUT: fills out HOST_IP and HOST_MAC 
'''
def search_network():
    stream = os.popen('arp-scan -l')
    output = stream.read()
    for line in output.split('\n'):
        ip = re.findall(r'[0-9]+(?:\.[0-9]+){3}', line)
        mac = re.findall(r'(?:[0-9a-fA-F]:?){12}', line)
        if ip:
            HOST_IP.append(ip[0])
        if mac:
            HOST_MAC.append(mac[0])


'''
get ip address of the current system, and the router it is connected to
INPUT: null
OUTPUT: returns the ip address of the system
'''
def get_my_ip():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(("8.8.8.8", 80))
    ip = s.getsockname()[0]
    s.close()
    return ip
'''
does a regular nmap scan to gather information about the devices onto the network
INPUT: ip address
OUTPUT: fills the matrix 'A' containing information about the open ports found
'''
def nmap_scan(tgt_host):
    nmScan = nmap.PortScanner()
    
    nmScan.scan(tgt_host, '21-443')

    # run a loop to print all the found result about the ports
    for host in nmScan.all_hosts():
        print('[+] Host IP : %s\n[+] Host Name : %s' % (host, nmScan[host].hostname()))
        print('[+] State : %s' % nmScan[host].state())
        for proto in nmScan[host].all_protocols():
            print('----------')
            print('[+] Protocol : %s' % proto)
            lport = nmScan[host][proto].keys()
            lport=sorted(lport)
            for port in lport:
                print ('[+] Port : %s\tState : %s' % (port, nmScan[host][proto][port]['state']))
                print ('[+] Name : %s\tProduct : %s\tVersion : %s' % (nmScan[host][proto][port]['name'], nmScan[host][proto][port]['product'], nmScan[host][proto][port]['version']))
                print ('[+] Additional info : %s\tCommon Platform Enumeration : %s' % (nmScan[host][proto][port]['extrainfo'], nmScan[host][proto][port]['cpe']))
\
                # Start concatenating matrix rows onto A

                global A
                #if any of the values are null, fill the element with "null"
                if nmScan[host][proto][port]['state'] == "":
                   nmScan[host][proto][port]['state'] = "null"
                if nmScan[host][proto][port]['name'] == "":
                   nmScan[host][proto][port]['name'] = "null"
                if nmScan[host][proto][port]['product'] == "":
                   nmScan[host][proto][port]['product'] = "null"
                if nmScan[host][proto][port]['version'] == "":
                   nmScan[host][proto][port]['version'] = "null"
                if nmScan[host][proto][port]['extrainfo'] == "":
                   nmScan[host][proto][port]['extrainfo'] = "null"
                if nmScan[host][proto][port]['cpe'] == "":
                   nmScan[host][proto][port]['cpe'] = "null"
                  
                B = numpy.matrix([port, nmScan[host][proto][port]['state'], nmScan[host][proto][port]['name'], nmScan[host][proto][port]['product'], nmScan[host][proto][port]['version'], nmScan[host][proto][port]['extrainfo'], nmScan[host][proto][port]['cpe'], str(tgt_host)])
                A = numpy.concatenate((A,B))
'''
prints out the addresss resolution index table of the devices on the network
INPUT: null
OUTPUT: stdout printing the ARP table
'''
def display_arp():
    print('ARP index:')
    print('IP address\t|\tMac Address')
    print('--------------------------------------------')
    for i in range(0, len(HOST_IP)):
        print(HOST_IP[i] + '\t|\t' + HOST_MAC[i])
        print('--------------------------------------------')
    print('\n\n')

'''
Prints out the concatenated information into an output file
INPUT: null
OUTPUT: write the information of matrix A onto the file "targets.txt"
'''
def write_report():
    with open('targets.txt','w+') as fp:
    	for line in A:
    		numpy.savetxt(fp,line,fmt="%s ,")
    fp.close()
    return

'''
Main function (program begins here)
'''
if __name__ == '__main__':
    global drone_ip                # holds the payload's IP address
    drone_ip = get_my_ip()         # populate the payload's IP address
    search_network()               # search the network for devices connected on to the network
    get_router_ip()                # get the router's IP address
    print("Drone IP: " + drone_ip) # print the payload's IP address
    display_arp()                  # print network devices' addresss resolution index table
    for i in HOST_IP:              # nmap scan each IP address
        print('\n\n\n[*] Scanning ip address: ' + i)
        nmap_scan(i)
    print("Matrix containing information in file: \n")
    print(A)                       # prints out the compressed nmap scan results of each device/service
    write_report()                 # converts compressed nmap scan results to a text file



    
